# MemoryArk 2.0 + LINE Service 統一部署配置
# 本地開發: podman-compose up 或 docker-compose up
# 生產環境: docker-compose up -d
version: '3.8'

services:
  # 前端建構服務（只在建構時運行）
  frontend-builder:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
    command: sh -c "npm ci && npm run build"
    profiles:
      - build

  # Redis 服務 (LINE Service 任務隊列使用)
  redis:
    image: docker.io/library/redis:7-alpine
    container_name: memoryark-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./logs/redis:/var/log/redis
    command: redis-server --appendonly yes --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "7"
    networks:
      - memoryark

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: memoryark-backend:latest
    container_name: memoryark-backend
    environment:
      # 基本配置
      - GIN_MODE=${GIN_MODE:-release}
      - PORT=${PORT:-8081}
      
      # 資料庫配置
      - DATABASE_PATH=/app/data/memoryark.db
      
      # JWT 配置 (生產環境請務必更改)
      - JWT_SECRET=${JWT_SECRET:-ccb020fd03f8899d33d82efc854fb7f5736e431392aeaca49470c1b80702ebe0}
      
      # 檔案上傳配置
      - UPLOAD_PATH=${UPLOAD_PATH:-./uploads}
      
      # 管理員配置 (請在 .env 檔案中設定，否則不會有預設管理員)
      - ROOT_ADMIN_EMAIL=${ROOT_ADMIN_EMAIL:-}
      - ROOT_ADMIN_NAME=${ROOT_ADMIN_NAME:-系統管理員}
      
      # 開發模式配置（本地開發設為 true，生產環境設為 false）
      - DEVELOPMENT_MODE=${DEVELOPMENT_MODE:-false}
      - DEV_AUTO_LOGIN_EMAIL=${DEV_AUTO_LOGIN_EMAIL:-}
      - DEV_BYPASS_AUTH=${DEV_BYPASS_AUTH:-false}
      - DEV_CORS_ENABLED=${DEV_CORS_ENABLED:-false}
      
      # 檔案上傳限制
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-104857600}      # 100MB
      - MAX_UPLOAD_MEMORY=${MAX_UPLOAD_MEMORY:-33554432}  # 32MB
      
      # 功能開關
      - DEDUPLICATION_ENABLED=${DEDUPLICATION_ENABLED:-true}
      - STREAMING_EXPORT_ENABLED=${STREAMING_EXPORT_ENABLED:-true}
      - EXPORT_CLEANUP_INTERVAL=${EXPORT_CLEANUP_INTERVAL:-24h}
      - VIRTUAL_PATH_ENABLED=${VIRTUAL_PATH_ENABLED:-true}
      - ENABLE_SHARED_RESOURCES=${ENABLE_SHARED_RESOURCES:-false}
      - ENABLE_SABBATH_DATA=${ENABLE_SABBATH_DATA:-false}
      
      # 效能優化配置
      - GOMEMLIMIT=${GOMEMLIMIT:-512MiB}
      - GOGC=${GOGC:-100}
      - GOMAXPROCS=${GOMAXPROCS:-2}
      
      # LINE Service API Token (內部通訊認證)
      - LINE_SERVICE_API_TOKEN=${LINE_SERVICE_API_TOKEN:-line-service-internal-token-2024}
    
    volumes:
      - ./data:/app/data
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    
    # 健康檢查
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    restart: unless-stopped
    
    # 日誌配置
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "7"
    
    # 網絡配置
    networks:
      - memoryark

  nginx:
    image: nginx:alpine
    container_name: memoryark-nginx
    depends_on:
      - backend
    ports:
      - "7001:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/dist:/usr/share/nginx/html
      - ./logs/nginx:/var/log/nginx
    restart: unless-stopped
    
    # 日誌配置
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "7"
    
    # 網絡配置
    networks:
      - memoryark

  # LINE Service (Node.js + TypeScript)
  line-service:
    build:
      context: ./line-service
      dockerfile: Dockerfile
    image: memoryark-line-service:latest
    container_name: memoryark-line-service
    depends_on:
      - redis
      - backend
    env_file:
      - ./line-service/.env
    environment:
      # 容器專用配置 (覆蓋 env_file 中的設定)
      - REDIS_HOST=redis           # 容器內 Redis 主機名
      - REDIS_PORT=6379            # 容器內 Redis 端口
      - MEMORYARK_API_URL=http://memoryark-backend:8081  # 容器內後端 URL
      
      # 容器路徑配置
      - UPLOAD_PATH=/app/uploads
      - TEMP_PATH=/app/temp
      - LOG_PATH=/app/logs
    
    volumes:
      # 與 MemoryArk 共享的目錄
      - ./uploads:/app/uploads
      - ./line-service/logs:/app/logs
      - ./line-service/temp:/app/temp
      # 只讀的數據庫檔案 (需要時可讀取)
      - ./data:/app/data:ro
    
    # 健康檢查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    restart: unless-stopped
    
    # 日誌配置
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "7"
    
    # 網絡配置
    networks:
      - memoryark

  # LINE 專用 Nginx
  line-nginx:
    image: nginx:alpine
    container_name: memoryark-line-nginx
    depends_on:
      - line-service
    ports:
      - "7002:80"
    volumes:
      - ./line-nginx.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
    restart: unless-stopped
    
    # 健康檢查
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # 日誌配置
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "7"
    
    # 網絡配置
    networks:
      - memoryark

# 定義 Volume
volumes:
  redis-data:
    driver: local

# 定義網絡
networks:
  memoryark:
    driver: bridge